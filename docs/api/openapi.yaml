openapi: 3.0.0

info:
  title: API Системы прогнозирования закупок
  description: API для взаимодействия с системой прогнозирования закупок, позволяющий получать прогнозы и регистрировать новые продажи.
  version: 1.0.0

servers:
  - url: http://localhost:8000/api/v1
    description: Локальный сервер разработки.

components:
  schemas:
    ProductForecast:
      type: object
      description: Прогнозные метрики и данные об остатках для одного товара, рассчитанные системой на основе продаж и текущих запасов.
      required:
        - product_sku
        - product_name
        - current_inventory
        - sales_velocity_30d
        - days_of_supply
        - estimated_out_of_stock_date
        - reorder_point
        - recommended_order_quantity
      properties:
        product_id:
          type: integer
          description: Внутренний ID товара в базе данных.
          example: 1
          readOnly: true
        product_sku:
          type: string
          description: Уникальный код товара (SKU).
          example: "SKU-1001"
        product_name:
          type: string
          description: Название товара.
          example: "Widget A"
        current_inventory:
          type: integer
          description: Текущий остаток товара на всех складах.
          example: 150
        sales_velocity_30d:
          type: number
          format: float
          description: Средняя скорость продаж товара за последние 30 дней (единиц в день).
          example: 5.25
        sales_velocity_60d:
          type: number
          format: float
          description: Средняя скорость продаж товара за последние 60 дней (единиц в день).
          example: 4.8
          nullable: true
        sales_velocity_90d:
          type: number
          format: float
          description: Средняя скорость продаж товара за последние 90 дней (единиц в день).
          example: 4.5
          nullable: true
        days_of_supply:
          type: number
          format: float
          description: На сколько дней хватит текущего остатка товара при текущей скорости продаж (на основе 30-дневной скорости).
          example: 28.57
          nullable: true
        estimated_out_of_stock_date:
          type: string
          format: date
          description: Прогнозируемая дата исчерпания запасов (на основе 30-дневной скорости продаж и текущих остатков).
          example: "2025-07-30"
          nullable: true
        reorder_point:
          type: integer
          description: Количество остатков, при котором необходимо сделать новый заказ (точка заказа, за основу берём 45-дневный запас).
          example: 237
        recommended_order_quantity:
          type: integer
          description: Рекомендуемый объём нового заказа (за основу берём 90-дневный запас), который предлагается, если текущий остаток ниже точки заказа.
          example: 475
      example:
        product_id: 1
        product_sku: "SKU-1001"
        product_name: "Widget A"
        current_inventory: 150
        sales_velocity_30d: 5.25
        sales_velocity_60d: 4.8
        sales_velocity_90d: 4.5
        days_of_supply: 28.57
        estimated_out_of_stock_date: "2025-07-30"
        reorder_point: 237
        recommended_order_quantity: 475

    SaleInput:
      type: object
      description: Данные о новой продаже для регистрации.
      required:
        - product_id
        - quantity
        - price
      properties:
        product_id:
          type: integer
          description: Внутренний ID товара в базе данных.
          example: 1
        quantity:
          type: integer
          description: Количество проданного товара.
          minimum: 1
          example: 5
        price:
          type: number
          format: float
          description: Цена единицы проданного товара.
          minimum: 0
          example: 99.99

    ErrorResponse:
      type: object
      description: Стандартизированный формат ответа при возникновении ошибки.
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: HTTP-статус код ошибки.
          example: 404
        message:
          type: string
          description: Детальное сообщение об ошибке.
          example: "Товар с SKU 'NON_EXISTENT_SKU' не найден."

paths:
  /forecasts:
    get:
      summary: Возвращает список всех товаров с их прогнозными метриками.
      description: Использует данные из представления full_forecast (SQL-представление) для получения текущих прогнозных данных по всем товарам.
      operationId: getForecasts
      tags:
        - Прогнозы
      responses:
        '200':
          description: Успешный запрос, возвращает список прогнозов.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductForecast'
              examples:
                successfulResponse:
                  summary: Пример успешного ответа со списком прогнозов
                  value:
                    - product_id: 1
                      product_sku: "SKU-1001"
                      product_name: "Widget A"
                      current_inventory: 150
                      sales_velocity_30d: 5.25
                      sales_velocity_60d: 4.8
                      sales_velocity_90d: 4.5
                      days_of_supply: 28.57
                      estimated_out_of_stock_date: "2025-07-30"
                      reorder_point: 237
                      recommended_order_quantity: 475
                    - product_id: 2
                      product_sku: "SKU-1002"
                      product_name: "Gadget B"
                      current_inventory: 80
                      sales_velocity_30d: 2.1
                      sales_velocity_60d: 1.9
                      sales_velocity_90d: 1.8
                      days_of_supply: 38.10
                      estimated_out_of_stock_date: "2025-08-08"
                      reorder_point: 95
                      recommended_order_quantity: 190
        '500':
          description: Внутренняя ошибка сервера.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalError:
                  summary: Пример ошибки сервера
                  value:
                    code: 500
                    message: "Не удалось получить прогнозы из базы данных."

  /forecasts/{product_sku}:
    get:
      summary: Возвращает прогнозные метрики для конкретного товара по его SKU.
      description: Получает прогнозные данные для указанного SKU из представления full_forecast.
      operationId: getForecastBySku
      tags:
        - Прогнозы
      parameters:
        - name: product_sku
          in: path
          required: true
          description: Уникальный код товара (SKU).
          schema:
            type: string
            example: "SKU-1001"
      responses:
        '200':
          description: Успешный запрос, возвращает прогноз для указанного SKU.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductForecast'
              examples:
                successfulResponse:
                  summary: Пример успешного ответа для одного SKU
                  value:
                    product_id: 1
                    product_sku: "SKU-1001"
                    product_name: "Widget A"
                    current_inventory: 150
                    sales_velocity_30d: 5.25
                    sales_velocity_60d: 4.8
                    sales_velocity_90d: 4.5
                    days_of_supply: 28.57
                    estimated_out_of_stock_date: "2025-07-30"
                    reorder_point: 237
                    recommended_order_quantity: 475
        '404':
          description: Товар с указанным SKU не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  summary: Пример ошибки "Товар не найден"
                  value:
                    code: 404
                    message: "Товар с SKU 'NON_EXISTENT_SKU' не найден."
        '500':
          description: Внутренняя ошибка сервера.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalError:
                  summary: Пример ошибки сервера
                  value:
                    code: 500
                    message: "Не удалось получить прогноз из базы данных для SKU 'PRD-2024-001'."

  /sales:
    post:
      summary: Регистрирует данные о новой продаже.
      description: Принимает данные о новой продаже (ID товара, количество, цена) и записывает их в таблицу sales (в базе данных).
      operationId: createSale
      tags:
        - Продажи
      requestBody:
        description: Данные новой продажи в формате JSON.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleInput'
            examples:
              newSaleExample:
                summary: Пример тела запроса для новой продажи
                value:
                  product_id: 1
                  quantity: 5
                  price: 99.99
      responses:
        '201':
          description: Продажа успешно зарегистрирована.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Продажа успешно зарегистрирована."
        '400':
          description: Неверные входные данные.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidInput:
                  summary: Пример ошибки валидации
                  value:
                    code: 400
                    message: "Неверные входные данные: количество должно быть больше 0."
        '500':
          description: Внутренняя ошибка сервера.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalError:
                  summary: Пример ошибки сервера
                  value:
                    code: 500
                    message: "Не удалось зарегистрировать продажу в базе данных."